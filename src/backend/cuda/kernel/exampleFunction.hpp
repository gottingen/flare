// Copyright 2023 The EA Authors.
// part of Elastic AI Search
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include <Param.hpp>

#include <common/dispatch.hpp>  // common utility header for CUDA backends
                                // has the divup macro

#include <debug_cuda.hpp>  // For Debug only related CUDA validations

#include <common/kernel_cache.hpp>  // nvrtc cache mechanims API

#include <nvrtc_kernel_headers/exampleFunction_cuh.hpp>  //kernel generated by nvrtc

namespace flare {
namespace cuda {

namespace kernel {

static const unsigned TX = 16;  // Kernel Launch Config Values
static const unsigned TY = 16;  // Kernel Launch Config Values

template<typename T>  // CUDA kernel wrapper function
void exampleFunc(Param<T> c, CParam<T> a, CParam<T> b, const fly_someenum_t p) {
    auto exampleFunc = common::getKernel("flare::cuda::exampleFunc",
                                         {{exampleFunction_cuh_src}},
                                         TemplateArgs(TemplateTypename<T>()));

    dim3 threads(TX, TY, 1);  // set your cuda launch config for blocks

    int blk_x = divup(c.dims[0], threads.x);
    int blk_y = divup(c.dims[1], threads.y);
    dim3 blocks(blk_x, blk_y);  // set your cuda launch config for grid

    // EnqueueArgs encapsulates CUDA kernel launch
    // configuration paramters. There are various versions
    // of EnqueueArgs constructors that you can use depending
    // on your CUDA kernels needs such as shared memory etc.
    EnqueueArgs qArgs(blocks, threads, getActiveStream());

    // Call the kernel functor retrieved using flare::common::getKernel
    exampleFunc(qArgs, c, a, b, p);

    POST_LAUNCH_CHECK();  // Macro for post kernel launch checks
                          // these checks are carried  ONLY IN DEBUG mode
}

}  // namespace kernel
}  // namespace cuda
}  // namespace flare
